#include "scannerfuctions.h"

STLMesh makeSTLfromScan(XYGrid<T>* grid ){
    STLMesh mesh();
    for(int i=0;i<grid->nx()-1;i++){
        for(int j=0;j<grid->ny()-1;j++){
            /** calculated vectors of the 4 points
             *  p1--p2
             *  | \ |
             *  p3--p4
             *
             *  STLs use right hand rule to determin normal
             **/
            FAHVector3 p1,p2,p3,p4;
            FAHVector3 p1prime,p2prime,p3prime,p4prime;
            p1=vectorFromIJ(i,j,grid->at(i,j),grid->stepSize());
            p1prime = FAHVector3(&p1);
            p1prime[2]=0;

            p2=vectorFromIJ(i,j+1,grid->at(i,j+1),grid->stepSize());
            p2prime = FAHVector3(&p2);
            p2prime[2]=0;

            p3=vectorFromIJ(i+1,j+1,grid->at(i+1,j+1),grid->stepSize());
            p3prime = FAHVector3(&p3);
            p3prime[2]=0;

            p4=vectorFromIJ(i+1,j+1,grid->at(i+1,j+1),grid->stepSize());
            p4prime = FAHVector3(&p4);
            p4prime[2]=0;
            /// Make Triangles  p1-p3-p4 and p2-p1-p4 which form the top
            addFacetToSTL(p1,p3,p4,&mesh);
            addFacetToSTL(p2,p1,p4,&mesh);

            /// Make Triangles p4'-p3'-p1' and p4'-p1'-p2' with Zs=0 to form bottom
            addFacetToSTL(p4prime,p3prime,p1prime,&mesh);
            addFacetToSTL(p4prime,p1prime,p2prime,&mesh);

            /// NEED CASSES FOR i=0,j=0,i=nx-1,j=ny-1 to make walls
            if (0==i){ // FRONT
                /**
                 * p1--p2
                 *  | \ |
                 * p1'--p2'
                 *
                 * need facets p1-p1'-p2' ,   p2-p1-p2'
                **/
                addFacetToSTL(p1,p1prime,p2prime,&mesh);
                addFacetToSTL(p2,p1,p2prime,&mesh);
            }
            if (0==j){//LEFT
                /**
                 * p1--p3
                 *  | \ |
                 * p1'--p3'
                 *
                 * need facets p1-p1'-p3' ,   p3-p1-p3'
                **/
                addFacetToSTL(p1,p1prime,p3prime,&mesh);
                addFacetToSTL(p3,p1,p3prime,&mesh);
            }
            if ((grid->ny()-1)==j){//right
                /**
                 * p2--p4
                 *  | \ |
                 * p2'--p4'
                 *
                 * need facets p2'-p2-p4' ,   p4'-p2-p4
                **/
                addFacetToSTL(p2prime,p2,p4prime,&mesh);
                addFacetToSTL(p4prime,p2,p4,&mesh);
            }
            if ((grid->nx()-1)==i){//back
                /**
                 * p3--p4
                 *  | \ |
                 * p3'--p4'
                 *
                 * need facets p3-p3'-p4' ,   p4-p3-p4'
                **/
                addFacetToSTL(p3,p3prime,p4prime,&mesh);
                addFacetToSTL(p4,p3,p4prime,&mesh);
            }
        }
    }
    return mesh;
}

void addFacetToSTL(FAHVector3 p1,FAHVector3 p2,FAHVector3 p3,STLMesh* mesh){
    FAHTriangle t1(p1,p3,p4);
    STLFacet s1;
    s1.triangle=t1;
    s1.normal=t1.normal();
    mesh.AddFacet(&s1);
}


FAHVector3 vectorFromIJ(int i, int j, float val, float stepsize){
    float x=i*stepsize;
    float y=j*stepsize;
    return FAHVector3(x,y,val);
}
